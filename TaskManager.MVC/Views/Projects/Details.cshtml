@model TaskManager.Shared.DTOs.ProjectDto
@{
    ViewData["Title"] = "Detalles del Proyecto";
}

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="mb-0">
                    <i class="fas fa-project-diagram"></i> @Model.Name
                </h3>
                <span class="badge @GetStatusBadgeClass(Model.Status) fs-6">
                    @GetStatusDisplayName(Model.Status)
                </span>
            </div>
            <div class="card-body">
                <p class="card-text">@Model.Description</p>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <strong><i class="fas fa-calendar"></i> Fecha de Creación:</strong><br />
                        @Model.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                    </div>
                    <div class="col-md-6">
                        @if (Model.DueDate.HasValue)
                        {
                            <strong><i class="fas fa-clock"></i> Fecha de Vencimiento:</strong><br />
                            @Model.DueDate.Value.ToString("dd/MM/yyyy")
                        }
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <strong><i class="fas fa-user"></i> Creado por:</strong><br />
                        @Model.CreatedByUser.Name (@Model.CreatedByUser.Email)
                    </div>
                    <div class="col-md-6">
                        <strong><i class="fas fa-tasks"></i> Total de Tareas:</strong><br />
                        @Model.Tasks.Count
                    </div>
                </div>
                
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <a asp-action="Index" class="btn btn-secondary me-md-2">
                        <i class="fas fa-arrow-left"></i> Volver
                    </a>
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary me-md-2">
                        <i class="fas fa-edit"></i> Editar
                    </a>
                    <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Eliminar
                    </a>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-users"></i> Miembros del Equipo</h5>
            </div>
            <div class="card-body">
                @if (Model.TeamMembers.Any())
                {
                    <div class="list-group list-group-flush">
                        @foreach (var member in Model.TeamMembers)
                        {
                            <div class="list-group-item px-0">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@member.Name</h6>
                                </div>
                                <small class="text-muted">@member.Email</small>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">No hay miembros asignados al equipo.</p>
                }
            </div>
        </div>
    </div>
</div>

@if (Model.Tasks.Any())
{
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-tasks"></i> Tareas del Proyecto</h5>
                    <a asp-controller="Tasks" asp-action="Create" class="btn btn-sm btn-primary">
                        <i class="fas fa-plus"></i> Nueva Tarea
                    </a>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Título</th>
                                    <th>Estado</th>
                                    <th>Prioridad</th>
                                    <th>Asignado a</th>
                                    <th>Fecha de Vencimiento</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var task in Model.Tasks)
                                {
                                    <tr>
                                        <td>@task.Title</td>
                                        <td>
                                            <span class="badge @GetTaskStatusBadgeClass(task.Status)">
                                                @GetTaskStatusDisplayName(task.Status)
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @GetPriorityBadgeClass(task.Priority)">
                                                @GetPriorityDisplayName(task.Priority)
                                            </span>
                                        </td>
                                        <td>@(task.AssignedToUser?.Name ?? "No asignado")</td>
                                        <td>@(task.DueDate?.ToString("dd/MM/yyyy") ?? "Sin fecha")</td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group">
                                                <a asp-controller="Tasks" asp-action="Details" asp-route-id="@task.Id" class="btn btn-outline-primary">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <a asp-controller="Tasks" asp-action="Edit" asp-route-id="@task.Id" class="btn btn-outline-secondary">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body text-center">
                    <i class="fas fa-tasks fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No hay tareas en este proyecto</h5>
                    <p class="text-muted">¡Crea la primera tarea para comenzar!</p>
                    <a asp-controller="Tasks" asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Crear Primera Tarea
                    </a>
                </div>
            </div>
        </div>
    </div>
}

@functions {
    private string GetStatusBadgeClass(TaskManager.Shared.Models.ProjectStatus status)
    {
        return status switch
        {
            TaskManager.Shared.Models.ProjectStatus.Planning => "bg-secondary",
            TaskManager.Shared.Models.ProjectStatus.InProgress => "bg-primary",
            TaskManager.Shared.Models.ProjectStatus.Completed => "bg-success",
            TaskManager.Shared.Models.ProjectStatus.OnHold => "bg-warning",
            TaskManager.Shared.Models.ProjectStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusDisplayName(TaskManager.Shared.Models.ProjectStatus status)
    {
        return status switch
        {
            TaskManager.Shared.Models.ProjectStatus.Planning => "Planificación",
            TaskManager.Shared.Models.ProjectStatus.InProgress => "En Progreso",
            TaskManager.Shared.Models.ProjectStatus.Completed => "Completado",
            TaskManager.Shared.Models.ProjectStatus.OnHold => "En Pausa",
            TaskManager.Shared.Models.ProjectStatus.Cancelled => "Cancelado",
            _ => status.ToString()
        };
    }

    private string GetTaskStatusBadgeClass(TaskManager.Shared.Models.TaskStatus status)
    {
        return status switch
        {
            TaskManager.Shared.Models.TaskStatus.Todo => "bg-secondary",
            TaskManager.Shared.Models.TaskStatus.InProgress => "bg-primary",
            TaskManager.Shared.Models.TaskStatus.Testing => "bg-warning",
            TaskManager.Shared.Models.TaskStatus.Completed => "bg-success",
            TaskManager.Shared.Models.TaskStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetTaskStatusDisplayName(TaskManager.Shared.Models.TaskStatus status)
    {
        return status switch
        {
            TaskManager.Shared.Models.TaskStatus.Todo => "Por Hacer",
            TaskManager.Shared.Models.TaskStatus.InProgress => "En Progreso",
            TaskManager.Shared.Models.TaskStatus.Testing => "Pruebas",
            TaskManager.Shared.Models.TaskStatus.Completed => "Completado",
            TaskManager.Shared.Models.TaskStatus.Cancelled => "Cancelado",
            _ => status.ToString()
        };
    }

    private string GetPriorityBadgeClass(TaskManager.Shared.Models.TaskPriority priority)
    {
        return priority switch
        {
            TaskManager.Shared.Models.TaskPriority.Low => "bg-success",
            TaskManager.Shared.Models.TaskPriority.Medium => "bg-warning",
            TaskManager.Shared.Models.TaskPriority.High => "bg-danger",
            TaskManager.Shared.Models.TaskPriority.Critical => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityDisplayName(TaskManager.Shared.Models.TaskPriority priority)
    {
        return priority switch
        {
            TaskManager.Shared.Models.TaskPriority.Low => "Baja",
            TaskManager.Shared.Models.TaskPriority.Medium => "Media",
            TaskManager.Shared.Models.TaskPriority.High => "Alta",
            TaskManager.Shared.Models.TaskPriority.Critical => "Crítica",
            _ => priority.ToString()
        };
    }
}
